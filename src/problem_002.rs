// Even Fibonacci numbers

// Each new term in the Fibonacci sequence is generated by
// adding the previous two terms. By starting with 1 and 2,
// the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose
// values do not exceed four million, find the sum of the
// even-valued terms.

struct Fibonacci {
    prev: u32,
    current: u32,
}

impl Fibonacci {
    fn new() -> Fibonacci {
        return Fibonacci {
            prev: 1,
            current: 2,
        };
    }
    fn next(&mut self) -> Option<u32> {
        let next = self.prev + self.current;
        self.prev = self.current;
        self.current = next;
        if next < 4_000_000 {
            Some(next)
        } else {
            None
        }
    }
}

fn main() {
    let mut f = Fibonacci::new();
    let mut sum: u32 = 2;

    while let Some(n) = f.next() {
        if n % 2 == 0 {
            sum += n;
        }
    }
    println!("answer: {}", sum);
}
